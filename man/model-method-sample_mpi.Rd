% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{model-method-sample_mpi}
\alias{model-method-sample_mpi}
\alias{sample_mpi}
\title{Run Stan's MCMC algorithms with MPI}
\description{
The \verb{$sample_mpi()} method of a \code{\link{CmdStanModel}} object is
identical to the \verb{$sample()} method but with support for
\href{https://mc-stan.org/math/mpi.html}{MPI}. The target audience for MPI are
those with large computer clusters. For other users, the
\code{\link[=model-method-sample]{$sample()}} method provides both parallelization of
chains and threading support for within-chain parallelization.
}
\details{
In order to use MPI with Stan, an MPI implementation must be
installed. For Unix systems the most commonly used implementations are
MPICH and OpenMPI. The implementations provide an MPI C++ compiler wrapper
(for example mpicxx), which is required to compile the model.

An example of compiling with MPI:\preformatted{mpi_options <- list(STAN_MPI=TRUE, CXX="mpicxx", TBB_CXX_TYPE="gcc")
mod <- cmdstan_model("model.stan", cpp_options = mpi_options)
}

The C++ options that must be supplied to the
\link[=model-method-compile]{compile} call are:
\itemize{
\item \code{STAN_MPI}: Enables the use of MPI with Stan if \code{TRUE}.
\item \code{CXX}: The name of the MPI C++ compiler wrapper. Typically \code{"mpicxx"}.
\item \code{TBB_CXX_TYPE}: The C++ compiler the MPI wrapper wraps. Typically \code{"gcc"}
on Linux and \code{"clang"} on macOS.
}

In the call to the \verb{$sample_mpi()} method we can also provide the name of
the MPI launcher (\code{mpi_cmd}, defaulting to \code{"mpiexec"}) and any other
MPI launch arguments. In most cases, it is enough to only define the number
of processes with \code{mpi_args = list("n" = 4)}.
}
\section{Usage}{
\preformatted{$sample_mpi(
  data = NULL,
  mpi_cmd = "mpiexec",
  mpi_args = NULL,
  seed = NULL,
  refresh = NULL,
  init = NULL,
  save_latent_dynamics = FALSE,
  output_dir = NULL,
  chains = 4,
  parallel_chains = getOption("mc.cores", 1),
  chain_ids = seq_len(chains),
  iter_warmup = NULL,
  iter_sampling = NULL,
  save_warmup = FALSE,
  thin = NULL,
  max_treedepth = NULL,
  adapt_engaged = TRUE,
  adapt_delta = NULL,
  step_size = NULL,
  metric = NULL,
  metric_file = NULL,
  inv_metric = NULL,
  init_buffer = NULL,
  term_buffer = NULL,
  window = NULL,
  fixed_param = FALSE,
  sig_figs = NULL,
  validate_csv = TRUE,
  show_messages = TRUE
)
}
}

\section{Arguments unique to the \code{sample_mpi} method}{

\itemize{
\item \code{mpi_cmd}: (character vector) The MPI launcher used for launching MPI processes.
The default launcher is \code{"mpiexec"}.
\item \code{mpi_args}: (list) A list of arguments to use when launching MPI processes.
For example, \code{mpi_args = list("n" = 4)} launches the executable as
\verb{mpiexec -n 4 model_executable}, followed by CmdStan arguments
for the model executable.
}

All other arguments are the same as for \code{\link[=model-method-sample]{$sample()}}.
}

\section{Value}{
 The \verb{$sample_mpi()} method returns a \code{\link{CmdStanMCMC}} object.
}

\examples{
\dontrun{
# mpi_options <- list(STAN_MPI=TRUE, CXX="mpicxx", TBB_CXX_TYPE="gcc")
# mod <- cmdstan_model("model.stan", cpp_options = mpi_options)
# fit <- mod$sample_mpi(..., mpi_args = list("n" = 4))
}

}
\seealso{
The CmdStanR website
(\href{https://mc-stan.org/cmdstanr/}{mc-stan.org/cmdstanr}) for online
documentation and tutorials.

The Stan and CmdStan documentation:
\itemize{
\item Stan documentation: \href{https://mc-stan.org/users/documentation/}{mc-stan.org/users/documentation}
\item CmdStan Userâ€™s Guide: \href{https://mc-stan.org/docs/cmdstan-guide/}{mc-stan.org/docs/cmdstan-guide}
}

The Stan Math Library's MPI documentation
(\href{https://mc-stan.org/math/mpi.html}{mc-stan.org/math/mpi}) for more
details on MPI support in Stan.

Other CmdStanModel methods: 
\code{\link{model-method-check_syntax}},
\code{\link{model-method-compile}},
\code{\link{model-method-generate-quantities}},
\code{\link{model-method-optimize}},
\code{\link{model-method-sample}},
\code{\link{model-method-variational}}
}
\concept{CmdStanModel methods}
