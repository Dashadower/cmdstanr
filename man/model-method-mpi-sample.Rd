% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{model-method-mpi-sample}
\alias{model-method-mpi-sample}
\alias{sample_mpi}
\title{Run Stan's MCMC algorithms with MPI}
\description{
The \verb{$sample_mpi()} method of a \code{\link{CmdStanModel}} object runs the
default MCMC algorithm in CmdStan (\verb{algorithm=hmc engine=nuts}) with MPI
(STAN_MPI makefile flag), to produce a set of draws from the posterior
distribution of a model conditioned on some data.

In order to use MPI with Stan, an MPI implementation must be installed.
For Unix systems the most commonly used implementations are MPICH and OpenMPI.
The implementations provide an MPI C++ compiler wrapper (for example mpicxx),
which is required to compile the model.

An example of compiling with STAN_MPI:\preformatted{cpp_options = list(STAN_MPI = TRUE, CXX="mpicxx", TBB_CXX_TYPE="gcc")
mod <- cmdstan_model("model.stan", cpp_options = cpp_options)
}

The C++ options that need supplied to the compile call are:
\itemize{
\item \code{STAN_MPI}: Enables the use of MPI with Stan
\item \code{CXX}: The name of the MPI C++ compiler wrapper (typicall mpicxx)
\item \code{TBB_CXX_TYPE}: The C++ compiler the MPI wrapper wraps. Typically gcc on
Linux and clang on macOS.
}

In the call to the \verb{$sample_mpi()} method, we can additionally provide
the name of the MPI launcher (\code{mpi_cmd}), which defaults to "mpiexec",
and any other MPI launch arguments. In most cases, it is enough to
only define the number of processes with \code{mpi_args = list("n" = 4)}.

An example of a call of \verb{$sample_mpi()}:\preformatted{cpp_options = list(STAN_MPI = TRUE, CXX="mpicxx", TBB_CXX_TYPE="gcc")
fit <- mod$sample_mpi(data_list, mpi_args = c("-n", 4))
}
}
\section{Usage}{
\preformatted{$sample_mpi(
  data = NULL,
  mpi_cmd = "mpiexec",
  mpi_args = NULL,
  seed = NULL,
  refresh = NULL,
  init = NULL,
  save_latent_dynamics = FALSE,
  output_dir = NULL,
  chains = 4,
  parallel_chains = getOption("mc.cores", 1),
  chain_ids = seq_len(chains),
  iter_warmup = NULL,
  iter_sampling = NULL,
  save_warmup = FALSE,
  thin = NULL,
  max_treedepth = NULL,
  adapt_engaged = TRUE,
  adapt_delta = NULL,
  step_size = NULL,
  metric = NULL,
  metric_file = NULL,
  inv_metric = NULL,
  init_buffer = NULL,
  term_buffer = NULL,
  window = NULL,
  fixed_param = FALSE,
  sig_figs = NULL,
  validate_csv = TRUE,
  show_messages = TRUE
)
}
}

\section{Arguments}{

\itemize{
\item \code{mpi_cmd}: (character vector) The MPI launcher used for launching MPI processes.
The default launcher is \code{mpiexec}.
\item \code{mpi_args}: (list) A list of arguments to use when launching MPI processes.
For example, mpi_args = list("n" = 4) launches the executable as
\verb{mpiexec -n 4 model_executable}, followed by CmdStan arguments
for the model executable.
\item \code{data}, \code{seed}, \code{refresh}, \code{init}, \code{save_latent_dynamics}, \code{output_dir},
\code{chains}, \code{parallel_chains}, \code{chain_ids}, \code{iter_warmup}, \code{iter_sampling},
\code{save_warmup}, \code{thin}, \code{max_treedepth}, \code{adapt_engaged}, \code{adapt_delta},
\code{step_size}, \code{metric}, \code{metric_file}, \code{inv_metric}, \code{init_buffer},
\code{term_buffer}, \code{window}, \code{fixed_param}, \code{sig_figs}, \code{validate_csv},
\code{show_messages}:
Same as for the \code{\link[=model-method-sample]{$sample()}} method.
}
}

\section{Value}{
 The \verb{$sample_mpi()} method returns a \code{\link{CmdStanMCMC}} object.
}

\examples{
\dontrun{
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")

# Set path to cmdstan
# (Note: if you installed CmdStan via install_cmdstan() with default settings
# then setting the path is unnecessary but the default below should still work.
# Otherwise use the `path` argument to specify the location of your
# CmdStan installation.)
set_cmdstan_path(path = NULL)

# Create a CmdStanModel object from a Stan program,
# here using the example model that comes with CmdStan
file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(file)
mod$print()

# Data as a named list (like RStan)
stan_data <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))

# Run MCMC using the 'sample' method
fit_mcmc <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  parallel_chains = 2
)

# Use 'posterior' package for summaries
fit_mcmc$summary()

# Get posterior draws
draws <- fit_mcmc$draws()
print(draws)

# Convert to data frame using posterior::as_draws_df
as_draws_df(draws)

# Plot posterior using bayesplot (ggplot2)
mcmc_hist(fit_mcmc$draws("theta"))

# Call CmdStan's diagnose and stansummary utilities
fit_mcmc$cmdstan_diagnose()
fit_mcmc$cmdstan_summary()

# For models fit using MCMC, if you like working with RStan's stanfit objects
# then you can create one with rstan::read_stan_csv()

# stanfit <- rstan::read_stan_csv(fit_mcmc$output_files())


# Run 'optimize' method to get a point estimate (default is Stan's LBFGS algorithm)
# and also demonstrate specifying data as a path to a file instead of a list
my_data_file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.data.json")
fit_optim <- mod$optimize(data = my_data_file, seed = 123)

fit_optim$summary()


# Run 'variational' method to approximate the posterior (default is meanfield ADVI)
fit_vb <- mod$variational(data = stan_data, seed = 123)

fit_vb$summary()

# Plot approximate posterior using bayesplot
mcmc_hist(fit_vb$draws("theta"))


# Specifying initial values as a function
fit_mcmc_w_init_fun <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  refresh = 0,
  init = function() list(theta = runif(1))
)
fit_mcmc_w_init_fun_2 <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  refresh = 0,
  init = function(chain_id) {
    # silly but demonstrates optional use of chain_id
    list(theta = 1 / (chain_id + 1))
  }
)
fit_mcmc_w_init_fun_2$init()

# Specifying initial values as a list of lists
fit_mcmc_w_init_list <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  refresh = 0,
  init = list(
    list(theta = 0.75), # chain 1
    list(theta = 0.25)  # chain 2
  )
)
fit_optim_w_init_list <- mod$optimize(
  data = stan_data,
  seed = 123,
  init = list(
    list(theta = 0.75)
  )
)
fit_optim_w_init_list$init()
}

}
\seealso{
The CmdStanR website
(\href{https://mc-stan.org/cmdstanr/}{mc-stan.org/cmdstanr}) for online
documentation and tutorials.

The Stan and CmdStan documentation:
\itemize{
\item Stan documentation: \href{https://mc-stan.org/users/documentation/}{mc-stan.org/users/documentation}
\item CmdStan Userâ€™s Guide: \href{https://mc-stan.org/docs/cmdstan-guide/}{mc-stan.org/docs/cmdstan-guide}
}

Other CmdStanModel methods: 
\code{\link{model-method-check_syntax}},
\code{\link{model-method-compile}},
\code{\link{model-method-generate-quantities}},
\code{\link{model-method-optimize}},
\code{\link{model-method-sample}},
\code{\link{model-method-variational}}
}
\concept{CmdStanModel methods}
