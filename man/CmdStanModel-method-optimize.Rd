% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{CmdStanModel-method-optimize}
\alias{CmdStanModel-method-optimize}
\title{Run Stan's optimization algorithms}
\description{
The \code{optimize} method of a \code{\link{CmdStanModel}} object runs Stan's
optimizer. Arguments left at \code{NULL} default to the current CmdStan default.
}
\details{
CmdStan can find the posterior mode (assuming there is one). If the
posterior is not convex, there is no guarantee Stan will be able to find
the global mode as opposed to a local optimum of log probability. For
optimization, the mode is calculated without the Jacobian adjustment for
con- strained variables, which shifts the mode due to the change of
variables. Thus modes correspond to modes of the model as written.

-- \href{https://github.com/stan-dev/cmdstan/releases/latest}{CmdStan Interface User's Guide}
}
\section{Usage}{
\preformatted{$optimize(
  data = NULL,
  seed = NULL,
  refresh = NULL,
  init = NULL,
  algorithm = NULL,
  init_alpha = NULL,
  iter = NULL
)
}
}

\section{Arguments shared by all fitting methods}{
 The following arguments can
be specified for any of the fitting methods (\code{sample}, \code{optimize},
\code{variational}):
\itemize{
\item \code{data} (multiple options): The data to use:
\itemize{
\item A named list of \R objects like for RStan;
\item A path to a data file compatible with CmdStan.
}
\item \code{seed}: (positive integer) A seed for the (P)RNG to pass to CmdStan.
\item \code{refresh}: (non-negative integer) The number of iterations between
screen updates.
\item \code{init}: (multiple options) The initialization method:
\itemize{
\item A real number \code{x>0} initializes randomly between \code{[-x,x]} (on the
\emph{unconstrained} parameter space);
\item \code{0} initializes to \code{0};
\item A character vector of data file paths (one per chain) to
initialization files.
}
}
}

\section{Arguments unique to the \code{optimize} method}{
 In addition to the
arguments above, the \code{optimize} method also has the following arguments:
\itemize{
\item \code{algorithm}: (string) The optimization algorithm. One of
\code{"lbfgs"}, \code{"bfgs"}, or \code{"newton"}.
\item \code{iter}: (positive integer) The number of iterations.
\item \code{init_alpha}: (non-negative real) The line search step size for first
iteration. Not applicable if \code{algorithm="newton"}.
}
}

\section{Value}{
 The \code{optimize} method returns a \code{\link{CmdStanMLE}} object.
}

\examples{
\dontrun{
# Set path to cmdstan
# Note: if you installed CmdStan via install_cmdstan() with default settings
# then default below should work. Otherwise use the `path` argument to
# specify the location of your CmdStan installation.

set_cmdstan_path(path = NULL)

# Create a CmdStan model object from a Stan program,
# here using the example model that comes with CmdStan
stan_program <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(stan_program)
mod$print()

# Compile to create executable
mod$compile()

# Run MCMC (Stan's dynamic HMC/NUTS),
# specifying data as a named list (like RStan)
standata <- list(N = 10, y =c(0,1,0,0,0,0,0,0,0,1))
fit <- mod$sample(data = standata, seed = 123, num_chains = 2)
fit$summary()

# Can also specify data as a path to a file readable by CmdStan
my_data_file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.data.R")
fit2 <- mod$sample(data = my_data_file, seed = 123)
fit2$summary()

# If you like working with RStan's stanfit objects then you can
# also create a stanfit object with rstan::read_stan_csv()
if (require(rstan, quietly = TRUE)) {
  stanfit <- rstan::read_stan_csv(fit$output_files())
}

}

}
\seealso{
\code{\link{CmdStanModel}}

Other CmdStanModel-methods: \code{\link{CmdStanModel-method-compile}},
  \code{\link{CmdStanModel-method-sample}},
  \code{\link{CmdStanModel-method-variational}}
}
\concept{CmdStanModel-methods}
