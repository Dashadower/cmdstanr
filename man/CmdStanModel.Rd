% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{CmdStanModel}
\alias{CmdStanModel}
\title{CmdStanModel objects}
\description{
A \code{CmdStanModel} object is an \link[R6:R6]{R6} object returned by
the \code{\link[=cmdstan_model]{cmdstan_model()}} function. The object stores the path to a Stan
program as well as a path to a compiled executable once created, and
provides methods for fitting the model. See the \strong{Details} section for
available methods.
}
\details{
\code{CmdStanModel} objects have the following associated methods:
\describe{
\item{\code{code()}}{
Returns the Stan program located at \code{stan_file} as a string.
}
\item{\code{print()}}{
Prints a more readable version of the Stan program returned by \code{code()}.
}
\item{\code{compile()}}{
Compiles the Stan program. Translates the Stan code to C++, then calls the
C++ compiler. The resulting files are placed in the same directory as
\code{stan_file}.
}
\item{\code{sample(data = NULL, ...)}}{
Run the default MCMC algorithm in CmdStan (\code{algorithm=hmc engine=nuts}), to
produce a set of draws from the posterior distribution of a model
conditioned on some data.
Arguments:
\itemize{
\item \code{data}: If not \code{NULL}, then either a path to a data file compatible with
CmdStan or a named list of \R objects like for RStan.
\item \code{...}: Arguments to pass to CmdStan to control sampling.
TODO: enumerate these instead of \code{...}.
}

Return: a \code{\link{CmdStanMCMC}} object created from the csv files written by
CmdStan. Those csv files are written to the same directory as \code{stan_file}.
}
}
}
\examples{
\dontrun{
# Set path to cmdstan
# Note: if you installed CmdStan via install_cmdstan() with default settings
# then default below should work. Otherwise use the `path` argument to
# specify the location of your CmdStan installation.

set_cmdstan_path(path = NULL)

# Create a CmdStan model object from a Stan program,
# here using the example model that comes with CmdStan
stan_program <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(stan_program)
mod$print()

# Compile to create executable
mod$compile()

# Run MCMC (Stan's dynamic HMC/NUTS),
# specifying data as a named list (like RStan)
standata <- list(N = 10, y =c(0,1,0,0,0,0,0,0,0,1))
fit <- mod$sample(data = standata, seed = 123, num_chains = 2)
fit$summary()

# Can also specify data as a path to a file readable by CmdStan
my_data_file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.data.R")
fit2 <- mod$sample(data = my_data_file, seed = 123)
fit2$summary()

# If you like working with RStan's stanfit objects then you can
# also create a stanfit object with rstan::read_stan_csv()
if (require(rstan, quietly = TRUE)) {
  stanfit <- rstan::read_stan_csv(fit$output_files())
}

}

}
