% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{model-method-compile}
\alias{model-method-compile}
\title{Compile a Stan program or get the Stan code}
\description{
The \code{compile} method of a \code{\link{CmdStanModel}} object calls CmdStan
to translate a Stan program to C++ and call the C++ compiler. The resulting
files are placed in the same directory as the Stan program.
}
\section{Usage}{
\preformatted{$compile()
}
}

\section{Arguments unique to the \code{compile} method}{

These arguments are described briefly here and in greater detail in the
CmdStan manual. Arguments left at \code{NULL} default to the default used by the
installed version of CmdStan.
\itemize{
\item \code{opencl}: (logical) Should the model be compiled with OpenCL support enabled?
\item \code{opencl_platform_id}: (nonnegative integer) The ID of the OpenCL platform on which
to run the compiled model.
\item \code{opencl_device_id}: (nonnegative integer) The ID of the OpenCL device on the selected
OpenCL platform on which to run the compiled model.
\item \code{compiler_flags}: (character vector) Vector of characters representing custom compiler
flags to be used when compiling the model.
\item \code{threads}: (logical) Should the model be compiled with threading support?
}
}

\section{Value}{
 The \code{compile} method returns the \code{\link{CmdStanModel}} object
invisibly.
}

\examples{
\dontrun{
# Set path to cmdstan
# Note: if you installed CmdStan via install_cmdstan() with default settings
# then default below should work. Otherwise use the `path` argument to
# specify the location of your CmdStan installation.

set_cmdstan_path(path = NULL)

# Create a CmdStan model object from a Stan program,
# here using the example model that comes with CmdStan
stan_program <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(stan_program)
mod$print()

# Compile to create executable
mod$compile()

# Run sample method (MCMC via Stan's dynamic HMC/NUTS),
# specifying data as a named list (like RStan)
standata <- list(N = 10, y =c(0,1,0,0,0,0,0,0,0,1))
fit_mcmc <- mod$sample(data = standata, seed = 123, num_chains = 2)

# Call CmdStan's bin/summary
fit_mcmc$summary()

# Run optimization method (default is Stan's LBFGS algorithm)
# and also demonstrate specifying data as a path to a file (readable by CmdStan)
my_data_file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.data.R")
fit_optim <- mod$optimize(data = my_data_file, seed = 123)

#' Print estimates
fit_optim$summary()

# Run variational Bayes method (default is meanfield ADVI)
fit_vb <- mod$variational(data = standata, seed = 123)

# Call CmdStan's bin/summary
fit_vb$summary()

# For models fit using MCMC, if you like working with RStan's stanfit objects
# then you can create one with rstan::read_stan_csv()
if (require(rstan, quietly = TRUE)) {
  stanfit <- rstan::read_stan_csv(fit_mcmc$output_files())
  print(stanfit)
}

}

}
\seealso{
The CmdStanR website (\href{https://mc-stan.org/cmdstanr/}{mc-stan.org/cmdstanr})
for online documentation and tutorials.

The Stan and CmdStan documentation:
\itemize{
\item Stan doc (html or pdf): \href{https://mc-stan.org/users/documentation/}{mc-stan.org/users/documentation/}
\item CmdStan doc (pdf): (\href{https://github.com/stan-dev/cmdstan/releases/latest}{github.com/stan-dev/cmdstan/releases/}).
}

Other CmdStanModel methods: \code{\link{model-method-optimize}},
  \code{\link{model-method-sample}},
  \code{\link{model-method-variational}}
}
\concept{CmdStanModel methods}
