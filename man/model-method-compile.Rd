% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{model-method-compile}
\alias{model-method-compile}
\alias{compile}
\title{Compile a Stan program}
\description{
The \verb{$compile()} method of a \code{\link{CmdStanModel}} object
translates the Stan program to C++ and creates a compiled executable.

After compilation, the paths to the executable and the \code{.hpp} file
containing the generated C++ code are available via the \verb{$exe_file()} and
\verb{$hpp_file()} methods. The default is to create the executable in the same
directory as the Stan program and to write the generated C++ code in a
temporary directory. To save the C++ code to a non-temporary location use
\verb{$save_hpp_file()}.
}
\section{Usage}{
\preformatted{$compile(
  quiet = TRUE,
  dir = NULL,
  include_paths = NULL,
  cpp_options = list(),
  stanc_options = list(),
  force_recompile = FALSE
)
$exe_file()
$hpp_file()
$save_hpp_file(dir = NULL)
}
}

\section{Arguments}{

Leaving all arguments at their defaults should be fine for most users, but
optional arguments are provided to enable features in CmdStan (and the Stan
Math library). See the CmdStan manual for more details.
\itemize{
\item \code{quiet}: (logical) Should the verbose output from CmdStan during
compilation be suppressed? The default is \code{TRUE}, but if you encounter an
error we recommend trying again with \code{quiet=FALSE} to see more of the
output.
\item \code{dir}: (string) The path to the directory in which to store the CmdStan
executable (or \code{.hpp} file if using \verb{$save_hpp_file()}). The default is the
same location as the Stan program.
\item \code{include_paths}: (character vector) Paths to directories where Stan
should look for files specified in \verb{#include} directives in the Stan
program.
\item \code{cpp_options}: (list) Any makefile options to be used when compiling the
model (\code{STAN_THREADS}, \code{STAN_MPI}, \code{STAN_OPENCL}, etc.). Anything you would
otherwise write in the \code{make/local} file.
\item \code{stanc_options}: (list) Any Stan-to-C++ transpiler options to be used
when compiling the model.
\item \code{force_recompile}: (logical) Should the model be recompiled even if was
not modified since last compiled. The default is \code{FALSE}.
}
}

\section{Value}{
 The \verb{$compile()} method is called for its side effect of
creating the executable and adding its path to the \code{\link{CmdStanModel}} object,
but it also returns the \code{\link{CmdStanModel}} object invisibly.

The \verb{$exe_file()}, \verb{$hpp_file()}, and \verb{$save_hpp_file()} methods all return
file paths.
}

\examples{
\dontrun{
stan_program <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(stan_program, compile = FALSE)
mod$compile()
mod$exe_file()

stan_program <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(stan_program, compile = FALSE)
mod$compile(cpp_options = list(stan_threads = TRUE))
mod$exe_file()
}

}
\seealso{
The CmdStanR website
(\href{https://mc-stan.org/cmdstanr/}{mc-stan.org/cmdstanr}) for online
documentation and tutorials.

The Stan and CmdStan documentation:
\itemize{
\item Stan documentation: \href{https://mc-stan.org/users/documentation/}{mc-stan.org/users/documentation}
\item CmdStan Userâ€™s Guide: \href{https://mc-stan.org/docs/cmdstan-guide/}{mc-stan.org/docs/cmdstan-guide}
}

Other CmdStanModel methods: 
\code{\link{model-method-generate-quantities}},
\code{\link{model-method-optimize}},
\code{\link{model-method-sample}},
\code{\link{model-method-variational}}
}
\concept{CmdStanModel methods}
