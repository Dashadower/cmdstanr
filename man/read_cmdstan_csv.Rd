% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_csv.R
\name{read_cmdstan_csv}
\alias{read_cmdstan_csv}
\title{Read CmdStan CSV files into R}
\usage{
read_cmdstan_csv(files, variables = NULL, sampler_diagnostics = NULL)
}
\arguments{
\item{files}{A character vector of paths to the CSV files to read.}

\item{variables}{Optionally, a character vector naming the variables
(parameters, transformed parameters, and generated quantities) to read in.
\itemize{
\item If \code{NULL} (the default) then all variables are included.
\item If an empty string (\code{variables=""}) then none are included.
\item For non-scalar variables all elements or specific elements can be selected:
\itemize{
\item \code{variables = "theta"} selects all elements of \code{theta};
\item \code{variables = c("theta[1]", "theta[3]")} selects only the 1st and 3rd elements.
}
}}

\item{sampler_diagnostics}{Works the same way as \code{variables} but for sampler
diagnostic variables (e.g., \code{"treedepth__"}, \code{"accept_stat__"}, etc.).
Ignored if the model was not fit using MCMC.}
}
\value{
A named list with the following components:
\itemize{
\item \code{metadata}: A list of the meta information from the run that produced the
CSV file(s). See \strong{Examples} below.
}

The other components in the returned list depend on the method that produced
the CSV file(s).

For \link[=model-method-sample]{sampling} the returned list also includes the
following components:
\itemize{
\item \code{inv_metric}: A list (one element per chain) of inverse mass matrices
or their diagonals, depending on the type of metric used.
\item \code{step_size}: A list (one element per chain) of the step sizes used.
\item \code{warmup_draws}:  If \code{save_warmup} was \code{TRUE} when fitting the model then a
\code{\link[posterior:draws_array]{draws_array}} of warmup draws.
\item \code{post_warmup_draws}: A \code{\link[posterior:draws_array]{draws_array}} of
post-warmup draws.
\item \code{warmup_sampler_diagnostics}:  If \code{save_warmup} was \code{TRUE} when fitting the
model then a \code{\link[posterior:draws_array]{draws_array}} of warmup draws of the
sampler diagnostic variables.
\item \code{post_warmup_sampler_diagnostics}: A \code{\link[posterior:draws_array]{draws_array}}
of post-warmup draws of the sampler diagnostic variables.
}

For \link[=model-method-optimize]{optimization} the returned list also includes the
following components:
\itemize{
\item \code{point_estimates}: Point estimates for the model parameters.
}

For \link[=model-method-variational]{variational inference} the returned list also
includes the following components:
\itemize{
\item \code{draws}: A \code{\link[posterior:draws_matrix]{draws_matrix}} of draws from the
approximate posterior distribution.
}

For \link[=model-method-generate-quantities]{standalone generated quantities} the
returned list also includes the following components:
\itemize{
\item \code{generated_quantities}: A \code{\link[posterior:draws_array]{draws_array}} of
the generated quantities.
}
}
\description{
\code{read_cmdstan_csv()} is used internally by CmdStanR to read CmdStan's output
CSV files into \R. It can also be used by CmdStan users as a more flexible
and efficient alternative to \code{rstan::read_stan_csv()}.
}
\examples{
\dontrun{
stan_program <- write_stan_tempfile(
  "parameters {
    real alpha_scalar;
    vector[2] theta_vector;
    matrix[2,2] tau_matrix;
  }
  model {
    alpha_scalar ~ std_normal();
    theta_vector ~ std_normal();
    to_vector(tau_matrix) ~ std_normal();
  }"
)

# only using capture.output to avoid too much printed output in example
out <- utils::capture.output(
  mod <- cmdstan_model(stan_program),
  fit <- mod$sample(save_warmup=TRUE)
)

# Read in everything
x <- read_cmdstan_csv(fit$output_files())
str(x)

# Don't read in any of the sampler diagnostic variables
x <- read_cmdstan_csv(fit$output_files(), sampler_diagnostics = "")

# Don't read in any of the parameters or generated quantities
x <- read_cmdstan_csv(fit$output_files(), variables = "")

# Read in only specific parameters and sampler diagnostics
x <- read_cmdstan_csv(
  fit$output_files(),
  variables = c("alpha_scalar", "theta_vector[2]"),
  sampler_diagnostics = c("n_leapfrog__", "accept_stat__")
)

# For non-scalar parameters all elements can be selected or only some elements,
# e.g. all of "theta_vector" but only one element of "tau_matrix"
x <- read_cmdstan_csv(
  fit$output_files(),
  variables = c("theta_vector", "tau_matrix[2,1]")
)
}

}
